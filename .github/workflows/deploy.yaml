name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Set up doctl using the DigitalOcean GitHub Action
    - name: Set up doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    # Step 3: Update deployment file with the correct image tag
    - name: Update deployment file
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)
        sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/backend_service:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml

    # Step 4: Save DigitalOcean kubeconfig with short-lived credentials
    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

    # Step 5: Log in to DigitalOcean Container Registry
    - name: Log in to DigitalOcean Container Registry
      run: echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login -u doctl --password-stdin registry.digitalocean.com

    # Step 6: Build Docker Image
    - name: Build Docker Image
      run: docker build -t registry.digitalocean.com/bagels/backend_service:latest .

    # Step 7: Push Docker Image
    - name: Push Docker Image
      run: docker push registry.digitalocean.com/bagels/backend_service:latest

    # Step 8: Deploy to DigitalOcean Kubernetes
    - name: Deploy to DigitalOcean Kubernetes
      run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

    # Step 9: Verify deployment
    - name: Verify deployment
      run: kubectl rollout status deployment/backend-service

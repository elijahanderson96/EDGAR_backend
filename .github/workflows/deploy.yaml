name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up doctl using the DigitalOcean GitHub Action
      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # Step 3: Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean Container Registry
        run: echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login -u doctl --password-stdin registry.digitalocean.com

      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          docker build -t registry.digitalocean.com/${{ secrets.REGISTRY_NAME }}/backend_service:${TAG} .

      # Step 5: Push Docker Image
      - name: Push Docker Image
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          docker push registry.digitalocean.com/${{ secrets.REGISTRY_NAME }}/backend_service:${TAG}

      # Step 6: Update deployment file with the correct image tag
      - name: Update deployment file
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          sed -i 's|<IMAGE>|registry.digitalocean.com/${{ secrets.REGISTRY_NAME }}/backend_service:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml

      # Step 7: Save DigitalOcean kubeconfig with short-lived credentials
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 1200 ${{ secrets.CLUSTER_NAME }}

      # Step 8: Deploy to DigitalOcean Kubernetes
      - name: Deploy to DigitalOcean Kubernetes
        run: |
          kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml
          kubectl rollout status deployment/backend-service
